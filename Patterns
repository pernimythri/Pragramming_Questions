Output : 1 0 1 0 1 0 1 0...

public static void pattern(int n)
	    {
	        int k=1;
	        for(int i=1;i<=n;i++)
	        {
	            System.out.print(k+" ");
	            k=1-k;
	        }
	    }
-------------------------------------------
Output : 1 2 3 4 1 2 3 4 

public static void pattern(int n) {
        int x = 1;
        for (int i = 1; i <= n; i++) {
            if (x <= 4) {
                System.out.printf("%d ", x);
                x++;
            } else {
                x = 1;
                System.out.print(x+" ");
                x++;
            }
        }
    }


        OR
        

public class Main
{
    public static void pattern(int n) {
        int x = 1;
        for (int i = 1; i <= n; i++) {
            System.out.print(x+" ");
            x++;
            if(x>4)
            x=1;
        }
    }


    OR

 static void pattern(int n)
        {
            int x=1;
               for(int i=0;i<n;i++)
                {
                   if(x==1)
                       System.out.printf("%d ",(i%4)+1);
                   else
                       System.out.printf("%d ",5-(i%4));
                   if((i%4)==3)
                       x=1-x;
                }
        }


        OR

  static void pattern(int n)
        {
            for (int i = 0; i < n; i++) {
                int a = i % 8;
                if (a <= 4) {
                    System.out.printf("%d ", a + 1);        
                } 
                else {
                    System.out.printf("%d ", 9 - a);        
                }
            }
        }
                

        
---------------------------------------------------
1 3 5 7
15 12 9 6 3


public class Main
{
    public static void print(int start, int end, int step) {
        if (start <= end) {
             for (int i = start; i <= end; i += step)
                 System.out.print(i + " ");
     }
    else {
        for (int i = start; i >= end; i -= step)
            System.out.print(i + " ");
        }
    }

	public static void main(String[] args) {
        print(1,9,2);
        System.out.println();
        print(15,3,3);
	}
}
---------------------------------------------------------------------
 1 3 5 7
 15 18 21

public class Main
{
    // When stating and ending given
    
      public static void printOne(int start, int end, int step) {
        for (int num = start; num <= end; num += step) {
            System.out.printf("%d ", num);
        }
        System.out.println();
    }
 
    // When only no.of elements is given , we dont know ending number
    
    public static void printTwo(int start, int step, int count) {
        int num = start;
        for (int i = 1; i <= count; i++) {
            System.out.printf("%d ", num);
            num += step;
        }
        System.out.println();
    }



	public static void main(String[] args) {
        printOne(1,9,2);
        System.out.println();
        printTwo(15,3,3);
	}
}

-----------------------------------------------------------------------
Output: 1 2 4 8 16 32 ...............

static void pattern(int n)
        {
            for(int i=0;i<=n;i++)
            {
                System.out.print((1<<i) +" ");
            }
        }
--------------------------------------------------------------------------
1 2 3 4 5
  2 3 4 5
    3 4 5
      4 5
        5

class Solution {
    public String get(int n) {
        StringBuilder result = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j < i; j++) {
                result.append("  "); 
            }
            for (int j = i; j <= n; j++) {
                result.append(j).append(" ");
            }
            result.append('\n');
        }
        return result.toString();
    }
}
------------------------------------------------------------------------
print 10 9 8 7 6 5 4 3 2 1... return type is string

class Solution {
    public String print(int n) {
        StringBuilder result = new StringBuilder();
        for (int i = n; i >= 1; i--) {
            result.append(i).append(" ");
        }
        return result.toString().trim();
    }
}

           OR

class Solution {
    public String get(int n) {
        String[] arr = new String[n];
        for (int i = 0, x = n; i < arr.length; ++i, --x) {
            arr[i] = x + "";  
        }
        String s = String.join(" ", arr);
        return s;
    }
}


-------------------------------------------------------------------------
